mod camera;
mod wifi;

use anyhow::Result;
use esp_idf_svc::{
    eventloop::EspSystemEventLoop,
    hal::peripherals::Peripherals,
    http::server::{Configuration, EspHttpServer},
    io::Write,
    sys::{esp, esp_wifi_set_ps, nvs_flash_init, wifi_ps_type_t_WIFI_PS_NONE},
};
use log::info;
use std::{
    sync::{Arc, Mutex},
    time::{Duration, Instant},
};

use crate::camera::{Camera, CameraConfig, FrameSize};
use crate::wifi::wifi;

#[toml_cfg::toml_config]
pub struct Config {
    #[default("")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
}

fn main() -> Result<()> {
    esp_idf_svc::sys::link_patches();
    esp_idf_svc::log::EspLogger::initialize_default();

    let mut peripherals = Peripherals::take().unwrap();
    let sysloop = EspSystemEventLoop::take()?;

    unsafe { esp_wifi_set_ps(wifi_ps_type_t_WIFI_PS_NONE) };

    // The constant `CONFIG` is auto-generated by `toml_config`.
    let app_config = CONFIG;

    let mut cam_config = CameraConfig::new_jpeg_ov2640();
    cam_config.frame_size = FrameSize::UXGA;

    let camera = Camera::new(
        cam_config,
        &mut peripherals.pins.gpio32,
        &mut peripherals.pins.gpio0,
        &mut peripherals.pins.gpio26,
        &mut peripherals.pins.gpio27,
        &mut peripherals.pins.gpio35,
        &mut peripherals.pins.gpio34,
        &mut peripherals.pins.gpio39,
        &mut peripherals.pins.gpio36,
        &mut peripherals.pins.gpio21,
        &mut peripherals.pins.gpio19,
        &mut peripherals.pins.gpio18,
        &mut peripherals.pins.gpio5,
        &mut peripherals.pins.gpio25,
        &mut peripherals.pins.gpio23,
        &mut peripherals.pins.gpio22,
        &mut peripherals.ledc.timer0,
        &mut peripherals.ledc.channel0,
    )?;

    let cam = Arc::new(Mutex::new(camera));

    // Connect to the Wi-Fi network
    let _wifi = wifi(
        app_config.wifi_ssid,
        app_config.wifi_psk,
        peripherals.modem,
        sysloop,
    )?;

    let mut server = EspHttpServer::new(&Configuration::default())?;

    server.fn_handler("/", esp_idf_svc::http::Method::Get, |request| {
        let mut time = Instant::now();
        let result = cam.lock().unwrap().capture_jpeg();
        info!("Took {}ms to capture_jpeg", time.elapsed().as_millis());

        match result {
            Ok(jpeg) => {
                time = Instant::now();
                let mut response = request.into_response(
                    200,
                    None,
                    &[
                        ("Content-Type", "image/jpeg"),
                        ("Content-Length", &jpeg.len().to_string()),
                    ],
                )?;

                response.write_all(&jpeg)?;
                info!("Took {}ms to send image", time.elapsed().as_millis());
            }
            Err(e) => {
                let mut response = request.into_status_response(500)?;
                writeln!(response, "Error: {:#?}", e)?;
            }
        }

        Ok(())
    })?;

    loop {
        std::thread::sleep(Duration::from_secs(1));
    }
}
